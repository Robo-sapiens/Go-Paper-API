// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA37a3d7eDecodeMainInternalModels(in *jlexer.Lexer, out *Valuable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "roomID":
			out.RoomID = int(in.Int())
		case "valuable":
			out.Valuable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA37a3d7eEncodeMainInternalModels(out *jwriter.Writer, in Valuable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"roomID\":"
		out.RawString(prefix)
		out.Int(int(in.RoomID))
	}
	{
		const prefix string = ",\"valuable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valuable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Valuable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA37a3d7eEncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Valuable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA37a3d7eEncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Valuable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA37a3d7eDecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Valuable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA37a3d7eDecodeMainInternalModels(l, v)
}
func easyjsonA37a3d7eDecodeMainInternalModels1(in *jlexer.Lexer, out *PayAbility) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "roomID":
			out.RoomID = int(in.Int())
		case "payAbility":
			out.PayAbility = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA37a3d7eEncodeMainInternalModels1(out *jwriter.Writer, in PayAbility) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"roomID\":"
		out.RawString(prefix)
		out.Int(int(in.RoomID))
	}
	{
		const prefix string = ",\"payAbility\":"
		out.RawString(prefix)
		out.Bool(bool(in.PayAbility))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PayAbility) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA37a3d7eEncodeMainInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PayAbility) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA37a3d7eEncodeMainInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PayAbility) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA37a3d7eDecodeMainInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PayAbility) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA37a3d7eDecodeMainInternalModels1(l, v)
}
func easyjsonA37a3d7eDecodeMainInternalModels2(in *jlexer.Lexer, out *Paper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "roomID":
			out.RoomID = int(in.Int())
		case "paperCount":
			out.PaperCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA37a3d7eEncodeMainInternalModels2(out *jwriter.Writer, in Paper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"roomID\":"
		out.RawString(prefix)
		out.Int(int(in.RoomID))
	}
	{
		const prefix string = ",\"paperCount\":"
		out.RawString(prefix)
		out.Int(int(in.PaperCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Paper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA37a3d7eEncodeMainInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Paper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA37a3d7eEncodeMainInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Paper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA37a3d7eDecodeMainInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Paper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA37a3d7eDecodeMainInternalModels2(l, v)
}
func easyjsonA37a3d7eDecodeMainInternalModels3(in *jlexer.Lexer, out *Members) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Members, 0, 8)
			} else {
				*out = Members{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Member
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Member)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA37a3d7eEncodeMainInternalModels3(out *jwriter.Writer, in Members) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Members) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA37a3d7eEncodeMainInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Members) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA37a3d7eEncodeMainInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Members) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA37a3d7eDecodeMainInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Members) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA37a3d7eDecodeMainInternalModels3(l, v)
}
func easyjsonA37a3d7eDecodeMainInternalModels4(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "roomID":
			out.RoomID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "phone":
			out.Phone = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "toiletPaperCount":
			out.ToiletPaperCount = int(in.Int())
		case "payAbility":
			out.PayAbility = bool(in.Bool())
		case "valuable":
			out.Valuable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA37a3d7eEncodeMainInternalModels4(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	if in.RoomID != 0 {
		const prefix string = ",\"roomID\":"
		out.RawString(prefix)
		out.Int(int(in.RoomID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(*in.Name))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"toiletPaperCount\":"
		out.RawString(prefix)
		out.Int(int(in.ToiletPaperCount))
	}
	{
		const prefix string = ",\"payAbility\":"
		out.RawString(prefix)
		out.Bool(bool(in.PayAbility))
	}
	{
		const prefix string = ",\"valuable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valuable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA37a3d7eEncodeMainInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA37a3d7eEncodeMainInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA37a3d7eDecodeMainInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA37a3d7eDecodeMainInternalModels4(l, v)
}
